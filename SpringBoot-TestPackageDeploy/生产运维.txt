①查看JVM参数的值
  可以根据java自带的jinfo命令：
    jinfo -flags pid
  来查看jar 启动后使用的是什么gc、新生代、老年代分批的内存都是多少，示例如下：
    -XX:CICompilerCount=3 -XX:InitialHeapSize=234881024 -XX:MaxHeapSize=3743416320 -XX:MaxNewSize=1247805440 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=78118912 -XX:OldSize=156762112 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC
     .-XX:CICompilerCount ：最大的并行编译数
     .-XX:InitialHeapSize 和 -XX:MaxHeapSize ：指定JVM的初始和最大堆内存大小
     .-XX:MaxNewSize ： JVM堆区域新生代内存的最大可分配大小
     .…
     .-XX:+UseParallelGC ：垃圾回收使用Parallel收集器

②如何重启
  简单粗暴
      直接kill掉进程再次启动jar包
      ps -ef|grep java
      ##拿到对于Java程序的pid
      kill -9 pid
      ## 再次重启
      Java -jar  xxxx.jar
      当然这种方式比较传统和暴力，所以建议大家使用下面的方式来管理。
  脚本执行
      如果使用的是maven,需要包含以下的配置
      <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <configuration>
              <executable>true</executable>
          </configuration>
      </plugin>

      如果使用是gradle，需要包含下面配置
      springBoot {
          executable = true
      }

      启动方式：
      1、 可以直接./yourapp.jar 来启动
      2、注册为服务
      也可以做一个软链接指向你的jar包并加入到init.d中，然后用命令来启动。

      init.d 例子:

      ln -s /var/yourapp/yourapp.jar /etc/init.d/yourapp
      chmod +x /etc/init.d/yourapp
      这样就可以使用stop或者是restart命令去管理你的应用。

      /etc/init.d/yourapp start|stop|restart
      或者

      service yourapp start|stop|restart
      到此 springboot项目如何测试、联调和打包投产均已经介绍完，以后可以找时间研究一下springboot的自动化运维，以及spring boot 和docker相结合的使用。
